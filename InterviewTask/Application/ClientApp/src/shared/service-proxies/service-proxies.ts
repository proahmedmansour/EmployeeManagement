// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------

// /* tslint:disable */
// /* eslint-disable */
// // ReSharper disable InconsistentNaming

// import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
// import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
// import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
// import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

// import * as moment from 'moment';

// export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

// @Injectable()
// export class ApiServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }

//     /**
//      * @return Success
//      */
//     departmentsGet(): Observable<DepartmentListDto[]> {
//         let url_ = this.baseUrl + "/api/departments";
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDepartmentsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDepartmentsGet(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<DepartmentListDto[]>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<DepartmentListDto[]>;
//         }));
//     }

//     protected processDepartmentsGet(response: HttpResponseBase): Observable<DepartmentListDto[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(DepartmentListDto.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = ProblemDetails.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = ProblemDetails.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("Server Error", status, _responseText, _headers);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<DepartmentListDto[]>(null as any);
//     }

//     /**
//      * @param body (optional) 
//      * @return Success
//      */
//     departmentsPost(body: CreateDepartmentDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/departments";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDepartmentsPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDepartmentsPost(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<void>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<void>;
//         }));
//     }

//     protected processDepartmentsPost(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = ProblemDetails.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = ProblemDetails.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("Server Error", status, _responseText, _headers);
//             }));
//         } else if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(null as any);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(null as any);
//     }

//     /**
//      * @param body (optional) 
//      * @return Success
//      */
//     departmentsPut(body: UpdateDepartmentDto | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/api/departments";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };

//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDepartmentsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDepartmentsPut(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<void>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<void>;
//         }));
//     }

//     protected processDepartmentsPut(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = ProblemDetails.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = ProblemDetails.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("Server Error", status, _responseText, _headers);
//             }));
//         } else if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(null as any);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(null as any);
//     }

//     /**
//      * @return Success
//      */
//     departmentsDelete(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/api/departments/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };

//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDepartmentsDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDepartmentsDelete(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<void>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<void>;
//         }));
//     }

//     protected processDepartmentsDelete(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = ProblemDetails.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = ProblemDetails.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("Server Error", status, _responseText, _headers);
//             }));
//         } else if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return _observableOf<void>(null as any);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<void>(null as any);
//     }
// }

// @Injectable()
// export class DepartmentsServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
//     }

//     /**
//      * @return Success
//      */
//     details(id: string): Observable<DepartmentDetailDto> {
//         let url_ = this.baseUrl + "/api/departments/details/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDetails(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDetails(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<DepartmentDetailDto>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<DepartmentDetailDto>;
//         }));
//     }

//     protected processDetails(response: HttpResponseBase): Observable<DepartmentDetailDto> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = DepartmentDetailDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result400 = ProblemDetails.fromJS(resultData400);
//             return throwException("Bad Request", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result401 = ProblemDetails.fromJS(resultData401);
//             return throwException("Unauthorized", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("Server Error", status, _responseText, _headers);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<DepartmentDetailDto>(null as any);
//     }
// }

// export class CreateDepartmentDto implements ICreateDepartmentDto {
//     name!: string;
//     managerId!: string | undefined;

//     constructor(data?: ICreateDepartmentDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.managerId = _data["managerId"];
//         }
//     }

//     static fromJS(data: any): CreateDepartmentDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateDepartmentDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["managerId"] = this.managerId;
//         return data;
//     }
// }

// export interface ICreateDepartmentDto {
//     name: string;
//     managerId: string | undefined;
// }

// export class DepartmentDetailDto implements IDepartmentDetailDto {
//     id!: string;
//     name!: string | undefined;
//     managerId!: string | undefined;
//     managerName!: string | undefined;

//     constructor(data?: IDepartmentDetailDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.managerId = _data["managerId"];
//             this.managerName = _data["managerName"];
//         }
//     }

//     static fromJS(data: any): DepartmentDetailDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new DepartmentDetailDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["managerId"] = this.managerId;
//         data["managerName"] = this.managerName;
//         return data;
//     }
// }

// export interface IDepartmentDetailDto {
//     id: string;
//     name: string | undefined;
//     managerId: string | undefined;
//     managerName: string | undefined;
// }

// export class DepartmentListDto implements IDepartmentListDto {
//     id!: string;
//     name!: string | undefined;
//     managerId!: string | undefined;
//     managerName!: string | undefined;

//     constructor(data?: IDepartmentListDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.managerId = _data["managerId"];
//             this.managerName = _data["managerName"];
//         }
//     }

//     static fromJS(data: any): DepartmentListDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new DepartmentListDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["managerId"] = this.managerId;
//         data["managerName"] = this.managerName;
//         return data;
//     }
// }

// export interface IDepartmentListDto {
//     id: string;
//     name: string | undefined;
//     managerId: string | undefined;
//     managerName: string | undefined;
// }

// export class ProblemDetails implements IProblemDetails {
//     type!: string | undefined;
//     title!: string | undefined;
//     status!: number | undefined;
//     detail!: string | undefined;
//     instance!: string | undefined;

//     constructor(data?: IProblemDetails) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.type = _data["type"];
//             this.title = _data["title"];
//             this.status = _data["status"];
//             this.detail = _data["detail"];
//             this.instance = _data["instance"];
//         }
//     }

//     static fromJS(data: any): ProblemDetails {
//         data = typeof data === 'object' ? data : {};
//         let result = new ProblemDetails();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["type"] = this.type;
//         data["title"] = this.title;
//         data["status"] = this.status;
//         data["detail"] = this.detail;
//         data["instance"] = this.instance;
//         return data;
//     }
// }

// export interface IProblemDetails {
//     type: string | undefined;
//     title: string | undefined;
//     status: number | undefined;
//     detail: string | undefined;
//     instance: string | undefined;
// }

// export class UpdateDepartmentDto implements IUpdateDepartmentDto {
//     name!: string;
//     managerId!: string | undefined;

//     constructor(data?: IUpdateDepartmentDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.name = _data["name"];
//             this.managerId = _data["managerId"];
//         }
//     }

//     static fromJS(data: any): UpdateDepartmentDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UpdateDepartmentDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["name"] = this.name;
//         data["managerId"] = this.managerId;
//         return data;
//     }
// }

// export interface IUpdateDepartmentDto {
//     name: string;
//     managerId: string | undefined;
// }

// export class ApiException extends Error {
//     override message: string;
//     status: number;
//     response: string;
//     headers: { [key: string]: any; };
//     result: any;

//     constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
//         super();

//         this.message = message;
//         this.status = status;
//         this.response = response;
//         this.headers = headers;
//         this.result = result;
//     }

//     protected isApiException = true;

//     static isApiException(obj: any): obj is ApiException {
//         return obj.isApiException === true;
//     }
// }

// function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
//     if (result !== null && result !== undefined)
//         return _observableThrow(result);
//     else
//         return _observableThrow(new ApiException(message, status, response, headers, null));
// }

// function blobToText(blob: any): Observable<string> {
//     return new Observable<string>((observer: any) => {
//         if (!blob) {
//             observer.next("");
//             observer.complete();
//         } else {
//             let reader = new FileReader();
//             reader.onload = event => {
//                 observer.next((event.target as any).result);
//                 observer.complete();
//             };
//             reader.readAsText(blob);
//         }
//     });
// }